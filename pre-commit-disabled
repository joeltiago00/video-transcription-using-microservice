#!/bin/bash

##################################################
# Script to make code validation
# Using:
# - phpcs && phpcbf
# - phpmd
##################################################

echo -e "\033[1;33m"Initializing pre commit script..."\033[0m"

#------------------------
# Verifying if has staged files
#------------------------
FOLDERS_TO_PERSIST=("app" "Email" "Transcription" "Upload" "tests" "Repositories")
STAGED_FILES_CMD=$(git diff --cached --name-only --diff-filter=ACMR | grep \.php | grep -v \.blade\.php)
#------------------------
# Listing files for pre commit.
#------------------------
echo -e "\033[1;33m=========================================\033[0m"
echo -e "\033[1;33m=       File list to make review        =\033[0m"
echo -e "\033[1;33m= Green -> OK | Blue -> Not Considered  =  "
echo -e "\033[1;33m=========================================\033[0m"
for FILE in $STAGED_FILES_CMD; do
    LISTED='0'
    for FOLDER in "${FOLDERS_TO_PERSIST[@]}"; do
        if [[ "$FILE" =~ $FOLDER ]]; then
            echo -e "\033[1;32m"-\> $FILE"\033[0m"
            FILES="$FILES $FILE"
            LISTED='1'
            break;
        fi
    done

    if [[ $LISTED -eq '0' ]]; then
        IGNORED_FILES="$IGNORED_FILES $FILE"
        echo -e "\033[1;36m"-\> $FILE"\033[0m"
    fi
done

if [ "$STAGED_FILES_CMD" == "" ]; then
    echo $STAGED_FILES_CMD
    echo -e "\033[1;31m"None file found. Use command git add . or add the files manually and try again! "\033[0m"
    exit 1
fi

if [[ "$FILES" == "" && "$IGNORED_FILES" != "" ]]; then
    echo -e "\033[1;32m"Only files were found that will not be scanned. releasing commit..."\033[0m"
    exit 0
fi

#------------------------
# Listing files for PHPMD
#------------------------
for FILE in $FILES; do
    MDFILES="$MDFILES,$FILE"
done


#------------------------
# PHPCS e PHPCBF
#------------------------
if [ "$FILES" != "" ]; then
    echo -e "\033[1;33m"Running PHP CodeSniffer..."\033[0m"
    transcription_service/vendor/bin/phpcs --standard=transcription_service/phpcs.xml $FILES

    if [ $? != 0 ]; then
        # Allows the user to enter a new entry on the keyboard (STDIN)
        exec </dev/tty
        read -p "Violations were found in the project's Code Standards. Do you want to automatically fix what is possible? (Y)" choice
        [ "$choice" = "" ] && choice='Y'

        case ${choice:0:1} in
        y | Y)
            echo -e "\033[1;33m"Running PHP CodeBeautifier..."\033[0m"
            transcription_service/vendor/bin/phpcbf $FILES
            echo -e "\033[0;32m"Done! Check for errors that cannot be fixed automatically and add the new changes to the files to be committed."\033[0m"

            exit 1
            ;;
        *)
            echo -e "\033[41m"Please fix Violated Code Standards before committing."\033[0m"
            exit 1
            ;;
        esac
    fi
fi

#------------------------
# PHP Mess Detector
#------------------------
if [ "$MDFILES" != "" ]; then
    IGNORE='*RouteServiceProvider*,*/Kernel*,*Enum.php'
    echo -e "\033[1;33m"Running PHP Mess Detector..."\033[0m"
    transcription_service/vendor/bin/phpmd ${MDFILES:1} text transcription_service/phpmd.xml --exclude "$IGNORE"
    if [ $? -ne 0 ]; then
        exit 1
    fi
fi

echo -e "\033[1;32m"Finished script."\033[0m"
exit 0